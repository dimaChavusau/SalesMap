<apex:page showHeader="false" lightningStylesheets="false" >
    <html>

    <head>
        <apex:stylesheet value="{!$Resource.google_maps_lightning}"/>
        <apex:stylesheet value="{!$Resource.materialicons}"/>
        <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/>

        <script type="text/javascript"
                src="https://maps.google.com/maps/api/js?sensor=false&libraries=places,visualization&key=AIzaSyDG63zPtAxOOxs93mfYuWiQx7k-adtH5Ks"></script>
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    </head>
    <body>
    <div class="loader-container">
        <div class="loader-body">
            <div class="loader-msg"></div>
            <div class="loader"></div>
        </div>

    </div>
    <div class="status-container">
        <div class="status-body">

        </div>
    </div>
    <div id="map-container">
        <div id="updateGeolocation">
            <div class="body">
                Hallo
            </div>
            <div>
                <button id="confirmUpdateGeolocation" class="brand">Confirm</button>
                <button id="cancelUpdateGeolocation" class="neutral">Cancel</button>
            </div>
        </div>
        <div class="accountsInViewPortContainer">
            <div class="h1"> Currently visible Accounts </div>
            <div class="accountsInViewPort">

            </div>
        </div>
        <div class="optionInput">
            <button id="cbShowHotels">
                <img defaultSrc="{!URLFOR($Resource.map_icons, '/map_icons/hotel_disabled.png')}"
                     hoverSrc="{!URLFOR($Resource.map_icons, '/map_icons/hotel.png')}"
                     src="{!URLFOR($Resource.map_icons, '/map_icons/hotel_disabled.png')}"/>
                <div class="popup">Show/Hide <br/>Hotels</div>
            </button>
            <button id="cbShowRestaurants">
                <img defaultSrc="{!URLFOR($Resource.map_icons, '/map_icons/restaurant_disabled.png')}"
                     hoverSrc="{!URLFOR($Resource.map_icons, '/map_icons/restaurant.png')}"
                     src="{!URLFOR($Resource.map_icons, '/map_icons/restaurant_disabled.png')}"/>
                <div class="popup">Show/Hide <br/>Restaurants</div>
            </button>
            <button id="cbShowParking">
                <img defaultSrc="{!URLFOR($Resource.map_icons, '/map_icons/parking_disabled.png')}"
                     hoverSrc="{!URLFOR($Resource.map_icons, '/map_icons/parking.png')}"
                     src="{!URLFOR($Resource.map_icons, '/map_icons/parking_disabled.png')}"/>
                <div class="popup">Show/Hide <br/>Parking</div>
            </button>
            <button id="cbFitMapToMarker" class="left-margin">
                <i class="material-icons" style="color:rgba(0,0,0,.5)">
                    fullscreen
                </i>
                <div class="popup">Fit map to marker</div>
            </button>

            <label  class="switch">

                <input id="mainAccountSwitch" type="chswitcheckbox"/>
                <span class="slider round">
                    <span class="on"> main Accounts</span>
                    <span class="off">all Accounts</span>
                </span>
            </label>
            <!--label for="accstatus">***************************** Select Account Status ***************************</label>
            
            <select name="accstatus" id="accstatus" >
                <option value="All">All</option>
                <option value="MIGRATED">MIGRATED</option>
                <option value="Dormant Account">Dormant Account</option>
                <option value="Prospect Account">Prospect Account</option>
                <option value="Inactive Account">Inactive Account</option>
                <option value="Active Account">Active Account</option>
            </select-->

        </div>
        <div id="lsvLegend" class="legend">
            <div class=" btnToggleLegend">
                <i class="material-icons" >
                    reorder
                </i>
            </div>
            <table class="legendTable">

            </table>
        </div>
        <div id="lteLegend" class="legend">
            <div class=" btnToggleLegend">
                <i class="material-icons" >
                    reorder
                </i>
            </div>
            <table class="legendTable">

            </table>
        </div>
        <div id="territoryLegend" class="legend">
            <div class=" btnToggleLegend">
                <i class="material-icons" >
                    reorder
                </i>
            </div>
            <table class="legendTable">
            </table>
        </div>
        <div id="haendlerStatusLegend" class="legend">
            <div class=" btnToggleLegend">
                <i class="material-icons" >
                    reorder
                </i>
            </div>
            <table class="legendTable">
            </table>
        </div>


        <div id="legalHierarchyLegend" class="legend">
            <div class=" btnToggleLegend">
                <i class="material-icons" >
                    reorder
                </i>
            </div>
            <table class="legendTable">
            </table>
        </div>
        <div id="dcLegend" class="legend">
            <div class=" btnToggleLegend">
                <i class="material-icons" >
                    reorder
                </i>
            </div>
            <table class="legendTable">

            </table>
        </div>


        <div id="segLegend" class="legend">
            <div class=" btnToggleLegend">
                <i class="material-icons" >
                    reorder
                </i>
            </div>
            <table class="legendTable">

            </table>
        </div>
        <div id="map"></div>
    </div>
    <script>

        $(document).ready(function() {
            let data;
            let map;
            let key = "AIzaSyDG63zPtAxOOxs93mfYuWiQx7k-adtH5Ks";
            let service;
            let bounds = new google.maps.LatLngBounds();
            let accountMarker = [];
            let showHotels = false;
            let showRestaurants = false;
            let showParking = false;
            let hotelMarkers = [];
            let restaurantMarkers = [];
            let parkingMarkers = [];
            let infoWindows = [];
            let centerMarker = null;
            let unit = "";
            let mapOptions = ["cbShowHotels", "cbShowRestaurants", "cbShowParking", "cbFitMapToMarker"];
            let actions = ["navi", "event", "edit", "reset"];
            let currentMarker = null;
            let currentInfoWindow = null;
            let changeViewType = null;
            let isChanging = false;
            let onlyMainAccounts = false;
            let accountStatusVal = 'All';
            let selectedViewOption = null;
            let colorByLegalHierarchy = false;
            let colorByTerritory = false;
            let territories = [];
            let legalHierarchies = [];

            for(let i = 0; i < actions.length; i++) {
                $("body").on("mouseover", "."+actions[i], function() {

                    $( this ).find( ".popup" ).stop().fadeIn();
                });
                $("body").stop().on("mouseout", "."+actions[i], function() {

                    $( this ).find( ".popup" ).stop().fadeOut();
                });
            }

            for(let i = 0; i < mapOptions.length; i++) {
                $("body").on("mouseover", "#"+mapOptions[i], function() {
                    $(this).stop().animate({
                        backgroundColor: "#c7e9f9"
                    }, 500);
                    $( this ).find( ".popup" ).stop().fadeIn();

                });
                $("body").stop().on("mouseout", "#"+mapOptions[i], function() {
                    $(this).stop().animate({
                        backgroundColor: "white"
                    }, 500);
                    $( this ).find( ".popup" ).stop().fadeOut();
                });
            }

            $("body").on("click", "#cbShowHotels", function() {
                showHotels = !showHotels;
                 if(showHotels) {
                    $(this).find('img').attr('src', "{!URLFOR($Resource.map_icons, '/map_icons/hotel.png')}");
                } else {
                    $(this).find('img').attr('src', "{!URLFOR($Resource.map_icons, '/map_icons/hotel_disabled.png')}");
                }
                toggleNearby(
                    showHotels,
                    searchHotels,
                    hotelMarkers,
                    true
                );
            });

            $("body").on("click", "#cbShowRestaurants", function() {

                showRestaurants = !showRestaurants;
                if(showRestaurants) {
                    $(this).find('img').attr('src', "{!URLFOR($Resource.map_icons, '/map_icons/restaurant.png')}");
                } else {
                    $(this).find('img').attr('src', "{!URLFOR($Resource.map_icons, '/map_icons/restaurant_disabled.png')}");
                }
                toggleNearby(
                    showRestaurants,
                    searchRestaurants,
                    restaurantMarkers,
                    true
                );
            });

            $("body").on("click", "#cbShowParking", function() {

                showParking = !showParking;
                if(showParking) {
                    $(this).find('img').attr('src', "{!URLFOR($Resource.map_icons, '/map_icons/parking.png')}");
                } else {
                    $(this).find('img').attr('src', "{!URLFOR($Resource.map_icons, '/map_icons/parking_disabled.png')}");
                }
                toggleNearby(
                    showParking,
                    searchParking,
                    parkingMarkers,
                    true
                );
            });

            $("body").on("click", ".websiteLink", function() {
               let url = $(this).attr("url");
                 window.open(url,'_blank');
            });

            $("body").on("click", "#cbFitMapToMarker", function() {
               map.fitBounds(bounds);
            });

            $("body").on("click", ".btnToggleLegend", function() {
                let legendTable = $(this).parent().find('.legendTable');
               if(legendTable.is(':visible')) {
                   legendTable.hide();
               } else {
                   legendTable.show();
               }
            });

            $("body").on("click", "#resetGeolocation", function() {
               let accountId = currentMarker.account.Id;
               let lat = currentMarker.account.BillingLatitude;
               let lng = currentMarker.account.BillingLongitude;
               let LatLng = {
                   lat : parseFloat(lat),
                   lng : parseFloat(lng)
               };
               currentMarker.setPosition(LatLng);
               message = {
                    state: "GEOLOCATIONUPDATE",
                    accountId: accountId,
                    lat: lat,
                    lng: lng
                }
                parent.postMessage(message, lexOrigin);
                currentMarker = null;
                closeInfoWindows();
            });

            const fieldMap = {
                "Segmentation (POS)" : "Sales_Map_POS_Segment_Icon__c",
                "Segmentation (Owner)" : "Sales_Map_Owner_Segment_Icon__c",
                "Segmentation (CG)" : "Sales_Map_CG_Segment_Icon__c",
                "Last Sales Visit" : "Last_Sales_Visit_Icon__c",
                "Last Training Event" : "Last_Training_Event_Icon__c",
                "Händlerstatus" : "H_nderstatus__c",
                "Distribution Channel" : "Distribution_Channel_Color__c"
            }

            const checkToggleVisibilityItems = function() {
                const elements = document.getElementsByClassName("toggleVisibility");

                // Filter out elements with the class name "crossed"
                const filteredElements = Array.from(elements).filter(element => !element.classList.contains("crossed"));

                // Check if there is only one element left
                return filteredElements.length === 1;
            }

            $("body").on("click", ".toggleVisibility", function() {

                var onlyOneItemLeft = checkToggleVisibilityItems();

                if(onlyOneItemLeft && $(this).hasClass("crossed") === false) {
                    return;
                }

                $(this).toggleClass("crossed");
                $(this).parent().children(":first-child").toggleClass("crossed");
                
                let icon = $(this).attr("data-icon");
                let field = $(this).attr("data-field");

                let iconField = fieldMap[field];
                console.log(iconField);

                if(iconField == null) {
                    return;
                }

                for(let i = 0; i < accountMarker.length; i++) {
                    let marker = accountMarker[i];
                    if(marker != null && marker.account[iconField] === icon) {
                        if(marker.hidden) {
                            showMarker(marker, map);
                        } else {
                            hideMarker(marker);
                        }
                    }
                }

                createMarkerToggleEvent(accountMarker);
            });

            const createMarkerToggleEvent = function(accountMarker) {
                let visibleAccounts = [];
                
                accountMarker.map(m => {
                    if(m.hidden === false) { 
                        visibleAccounts.push(m.account.Id);
                    }
                }); 
                
                let message = {
                    state: "MARKER_TOGGLE_EVENT",
                    visibleAccounts: visibleAccounts
                };
            
                parent.postMessage(
                    message, 
                    lexOrigin
                );
            }

            $("body").on("click", ".toggleTerritory", function() {
                $(this).toggleClass("crossed");
                $(this).parent().children(":first-child").toggleClass("crossed");
                let t_Id = $(this).attr("data-id");
                accountMarker.map(marker => {
                    if(marker != null) {
                        if(marker.account.Territory__c === t_Id) {
                            if(marker.hidden) {
                                showMarker(marker, map);
                            } else {
                                hideMarker(marker);
                            }
                        }
                    }
                });
            });

            $("body").on("change", "#mainAccountSwitch", function() {
                onlyMainAccounts = $(this).is(":checked");
                message = {
                    state: "MAIN_ACCOUNT_SWITCH",
                    onlyMainAccounts: onlyMainAccounts
                }
                parent.postMessage(message, lexOrigin);

                if(onlyMainAccounts) {
                    for(let i in accountMarker) {
                        let marker = accountMarker[i];
                        if(marker != null) {
                            if(!marker.hidden) {
                                if(!marker.account.isMainAccount__c) {
                                    hideMarker(marker);
                                }
                            }
                        }

                    }
                } else {
                    showAllMarker(map);
                }

            });
                        
            $("body").on("click", "#createEventAction", function() {
                 message = {
                    state: "CREATE_EVENT",
                    accountId: currentMarker.account.Id,
                }
                parent.postMessage(message, lexOrigin);
            });

            function toggleOnlyMainAccounts() {
                if(onlyMainAccounts) {
                    for(let i in accountMarker) {
                        if(accountMarker[i] != null) {
                            if(!accountMarker[i].account.isMainAccount__c) {
                                hideMarker(accountMarker[i]);
                            }
                        }

                    }
                } else {
                    showAllMarker(map);
                }
            }

            function hideMarker(marker) {
                marker.hidden = true;
                marker.setMap(null);

            }
            function showMarker(marker, map) {
                marker.hidden = false;
                marker.setMap(map);
            }

            function showAllMarker(map) {

                for(let i = 0; i < accountMarker.length; i++) {
                    if(accountMarker[i] != null) {

                        if(accountMarker[i].hidden) {
                            accountMarker[i].hidden = false;
                        }
                        if(accountMarker[i].getMap() == null) {
                            accountMarker[i].setMap(map);
                        }
                    }

                }

            }

            function toggleNearby(show, searchFunc, markers, withDelete) {
                if(show) {
                    showMarkers(markers);
                    searchFunc(markers);
                } else {
                    if(withDelete) {
                        deleteMarkers(markers);
                    }
                }
            }

            function searchRestaurants(markers) {
                let iconUrl = "{!URLFOR($Resource.map_icons, '/map_icons/restaurant.png')}";
                performNearbySearch(['restaurant'], iconUrl, searchRestaurants, markers);
            }

            function searchHotels(markers) {
                let iconUrl = "{!URLFOR($Resource.map_icons, '/map_icons/hotel.png')}";
                performNearbySearch(['lodging'], iconUrl, searchHotels, markers);
            }

            function searchParking(markers) {
                let iconUrl = "{!URLFOR($Resource.map_icons, '/map_icons/parking.png')}";
                performNearbySearch(['parking'], iconUrl, searchHotels, markers);
            }

            function showMarkers(markers) {
                for(let i = 0; i < markers.length; i++) {
                   markers[i].setMap(map);
                }
            }
            function deleteMarkers(markers) {
                for(let i = 0; i < markers.length; i++) {
                   markers[i].setMap(null);
                }
                //markers = [];
            }

            function performNearbySearch(types, iconUrl, func, markers) {
                let request = {
                    bounds: map.getBounds(),
                    types: types,
                    nearbySearchKeys: ['photos'],
                    hasNextPage : true,
                };
                service.nearbySearch(request, function(results, status) {
                    googleNearbySearchCallback(results, status, iconUrl, func, markers, types[0]);

                });
            }

            function checkNearbySearches() {

                //toggle Restaurants
                toggleNearby(
                    showRestaurants,
                    searchRestaurants,
                    restaurantMarkers,
                    true
                );

                //toggle Hotels
                toggleNearby(
                    showHotels,
                    searchHotels,
                    hotelMarkers,
                    true
                );

                //toggle Parking
                toggleNearby(
                    showParking,
                    searchParking,
                    parkingMarkers,
                    true
                );

            }

            function closeInfoWindows() {
                for(let i = 0; i < infoWindows.length; i++) {
                    infoWindows[i].close();
                }
            }


            function googleNearbySearchCallback(results, status, iconUrl, func, markers, requestType) {

                if (status !== google.maps.places.PlacesServiceStatus.OK) {
                    console.error(status);
                    if(status === "OVER_QUERY_LIMIT") {
                        setTimeout(function() {
                            func();
                        }, 2000);
                    }
                    return;
                }

                for (let i = 0; i < results.length; i++) {
                    let result = results[i];
                    let markerHeight = 33;
                    let marker = new google.maps.Marker({
                        map: map,
                        position: result.geometry.location,
                        icon: {
                            url: iconUrl,
                            scaledSize: new google.maps.Size(markerHeight, markerHeight)
                        }
                    });
                    markers.push(marker);
                    marker.result = result;
                    google.maps.event.addListener(marker, 'click', function() {
                        let thisMarker = this;
                        service.getDetails(
                            {
                                placeId: thisMarker.result.place_id
                            },
                            function(place, status) {
                                if (status === google.maps.places.PlacesServiceStatus.OK) {
                                    closeInfoWindows();

                                    let content = "";
                                    let imgUrl = place.icon;
                                    if(place.photos) {
                                        imgUrl = place.photos[0].getUrl({maxWidth:150});
                                    }
                                    content = "<table> <tr>";
                                    content += "<td><img src='"+imgUrl+"'/></td>";
                                    content += '<td><div class="hotelDiv">';
                                    content += '<div class="name"  target="_blank"><strong>' + place.name + '</strong></div>';
                                    content += '<i>'+place.formatted_address+'</i><br><br>';
                                    let rating = 'n/a';
                                    if(place.rating) {
                                        let totalRatings = place.user_ratings_total == 1 ? ' ('+place.user_ratings_total + ' Rating)' : ' ('+place.user_ratings_total + ' Ratings)';
                                        rating = place.rating + totalRatings;
                                    }
                                    content += 'Rating: '+rating+'<br><br>';
                                    content += 'Phone: '+place.international_phone_number+'<br><br>';
                                    if(place.website) {
                                        content += 'Website: <a  target="_blank" href="'+place.website+'">'+place.website+'</a><br><br>';
                                    } else {
                                        content += 'Website: n/a <br><br>';
                                    }
                                    content += "</div><br/>";
                                    content += '<div class="hotelOptions bottom">';
                                    content += '<a class="navi" data-toggle="dropdown" data-hover="dropdown" href="http://maps.google.com/maps?daddr='+place.formatted_address+'" target="_blank"><i class="material-icons">navigation</i><div class="popup" style="display: none">Navigation</div></a> ';
                                    //content += '<a class="right" href="'+place.website+'" target="_blank">'+place.website+'</a> ';
                                    content+="</div></td><tr></table>";

                                    let infoWindow = new google.maps.InfoWindow({
                                        disableAutoPan: true
                                    });
                                    infoWindow.setContent(content);
                                    infoWindow.open(map, thisMarker);
                                    infoWindows.push(infoWindow);

                                } else {
                                    console.error("error fetching place detail information: "+status);
                                }

                            }
                        );


                    });

                }
            }

            function formatDate(d) {
                let date = new Date(d);
                let day = date.getDate();
                let month = date.getMonth()+1;
                let dayString = day  < 10 ? "0"+day : day;
                let monthString = month  < 10 ? "0"+month : month;
                let year = date.getFullYear();
                let concatDate = (year+"-"+monthString+"-"+dayString);
                let formattedDate = concatDate  === "NaN-NaN-NaN"? "n/a" : concatDate;
                return formattedDate;
            }

          

            function getInfoWindowContent(account) {
                let brandLogo = account.Brand_Logo__c ? account.Brand_Logo__c : "";
                let content = "<div class='infoWindow'> <div class='header' style='display:flex;align-items:center;'><a style='margin-right: 10px;' class='name' href='/"+account.Id+"' target='_blank'> "+account.Name+" - "+account.Bill_to_Number__c+"</a>"+brandLogo+"</div>";
                let lastSalesVisit = account.Last_Sales_Visit_URL__c;
                let nextSalesVisit = account.Planned_Next_Sales_Visit_URL__c;
                let lastTrainingEvent = account.Last_Training_Event_URL__c;
                let nextTrainingEvent = account.Next_Planned_Training_Event_URL__c;
                let targetVisits = account.hasOwnProperty('Planned_Visits__c') ? account.Planned_Visits__c : 'n/a';
                let actualVisits = account.hasOwnProperty('Actual_Visits_Total__c') ? account.Actual_Visits_Total__c : 'n/a';
                let targetTrainings = account.hasOwnProperty('Planned_Trainings__c') ? account.Planned_Trainings__c : 'n/a';
                let actualTrainings = account.hasOwnProperty('Actual_Trainings_Total__c') ? account.Actual_Trainings_Total__c : 'n/a';

                // content += "<br><br>";
                content += "<div class='sales-info'>";
                content += "<table class='infoWindowFieldTable'> <tr> ";
                content += "<td> <h2> <i class='material-icons'>event</i> Sales Visit </h2>";
                content += "<table> <tr> <td class='label'> next: </td><td> "+nextSalesVisit+"</td></tr>";
                content += "<tr> <td class='label'> last: </td> <td>"+lastSalesVisit+"</td></tr>";
                content += "<tr> <td class='label'> Target: </td> <td>"+targetVisits+"</td></tr>";
                content += "<tr> <td class='label'> Actual: </td> <td>"+actualVisits+"</td></tr>";
                content += "</table> </td>";
                content += "<td> <h2> <i class='material-icons'>event</i> Training Event</h2>";
                content += "<table> <tr> <td class='label'> next: </td><td> "+nextTrainingEvent+"</td></tr>";
                content += "<tr> <td class='label'> last: </td> <td>"+lastTrainingEvent+"</td></tr>";
                content += "<tr> <td class='label'> Target: </td> <td>"+targetTrainings+"</td></tr>";
                content += "<tr> <td class='label'> Actual: </td> <td>"+actualTrainings+"</td></tr>";
                content += "</table> </td> </tr> </table>";
                content += "</div>";

                let address = "";
                try {
                    address = account.BillingAddress.street + ", "+account.BillingAddress.postalCode+" "+account.BillingAddress.city+", "+account.BillingAddress.country;
                } catch(ex) {
                    console.error(ex);
                }
                let phone = account.Phone ? account.Phone : "n/a";
                content += "<div class='contact-info'>";
                content += "<table class='infoWindowFieldTable'> <tr> ";
                content += "<td> <h2> <i class='material-icons'>perm_contact_calendar</i> Contact Info </h2>";
                content += "<table> <tr> <td class='label'> Address:</td> <td>"+address+"</td></tr>";
                content += "<tr> <td class='label'>Phone:</td> <td>"+phone+"</td></tr>";
                content += "</table> </td>";
                content += "</tr> </table>";
                content += "</div>";

                let territory = account.Territory__c ? account.Territory__r.Name : "n/a";
                //let segmentation = account.Segmentation_POS__c;
                let pricingTermsDescription = "n/a";
                let customerHierarchy2Description = "n/a";

                if(account.Customer_Hierarchy_2_Description__c) {
                    customerHierarchy2Description = account.Customer_Hierarchy_2_Description__r.Name;
                    let kdh2SumOfPos = " (n/a)";
                    if(account.Customer_Hierarchy_2_Description__r.Sum_of_POS__c) {
                        kdh2SumOfPos = ' ('+account.Customer_Hierarchy_2_Description__r.Sum_of_POS__c+')';
                    }
                     customerHierarchy2Description += kdh2SumOfPos;
                }

                if(account.Pricing_Terms_Descripton__c) {
                    let kdh1SumOfPos = " (n/a)";
                    pricingTermsDescription = account.Pricing_Terms_Descripton__r.Name;
                    if(account.Pricing_Terms_Descripton__r.Sum_of_POS__c) {
                        kdh1SumOfPos = ' ('+account.Pricing_Terms_Descripton__r.Sum_of_POS__c+')';
                    }
                    pricingTermsDescription += kdh1SumOfPos;

                }
                let brands = account.Brands__c?.replaceAll(';', ',');

                content += "<div class='business-info'>";
                content += "<table class='infoWindowFieldTable'> <tr> ";
                content += "<td> <h2> <i class='material-icons'>business</i> Business Info </h2> </td> </tr> <tr> <td>";
                content += "<table> <tr> <td class='label'> Legal Hierarchy:</td><td> "+customerHierarchy2Description+"</td></tr>";
                content += "<tr> <td class='label'> Business Hierarchy:</td><td> "+pricingTermsDescription+"</td></tr>";
                content += "<tr> <td class='label'> Territory:</td><td> "+territory+"</td></tr>";
                content += "<tr> <td class='label'> Brand:</td><td> "+account.Own_Brand_formula__c+"</td></tr>";
                content += "<tr> <td class='label'> Segmentation (POS):</td><td> "+account.Segment_Text_POS1__c+"</td></tr>";
                content += "<tr> <td class='label'> Segmentation (CG):</td><td> "+account.Segment_Text_CG__c+"</td></tr>";
                content += "<tr> <td class='label'> Segmentation (Owner):</td><td> "+account.Segment_Text_Owner__c+"</td></tr>";
                //let = account.Affiliate_Code__c;
                //if(equals(account.Affiliate_Code__c,'S-FR'),content += "<tr> <td class='label'> Segmentation (CG):</td><td> "+account.Segment_Text_CG__c+"</td></tr>", content += "<tr> <td class='label'> Segmentation (Owner):</td><td> "+account.Segment_Text_Owner__c+"</td></tr>");
                content += "<tr> <td class='label'> Distribution Channel:</td><td> "+account.Distribution_Channel__c +"</td></tr>";
                content += "</td></tr> </table>";
                content += "</div>";

                content += '<div class="infoWindowOptionPanel">';
                content += '<a class="navi" href="http://maps.google.com/maps?daddr='+address+'" target="_blank"><i class="material-icons">navigation</i><div class="popup" style="display: none">Start navigation in google maps</div></a>';
                content += '<a class="edit" href="/'+account.Id+'/e?retURL='+account.Id+'" target="_blank"><i class="material-icons">border_color</i><div class="popup" style="display: none">Edit Customer Information</div></a>';
                content += '<a class="event" id="createEventAction"><i class="material-icons">event</i><div class="popup" style="display: none">Schedule Event</div></a>';
                // content += '<a id="resetGeolocation" class="reset"><i class="material-icons">pin_drop</i><div class="popup" style="display: none">Reset geolocation to default</div></a>';

                content += "</div>";
                return content;
            }



            function updateAccountsInViewPort(map, accountMarker) {
                if(map != null) {
                    let accountsInViewPortHTML = "<table>";
                    let i;
                    let l = accountMarker.length;
                    for(i = 0; i < l; i++) {
                        let marker = accountMarker[i];
                        if( map.getBounds().contains(marker.getPosition()) )
                        {
                            accountsInViewPortHTML += "<tr> <td class='account-row'>"+marker.account.Name+"</td></tr>";
                        }
                    }
                    accountsInViewPortHTML += "</table>";
                    $(".accountsInViewPort").html(accountsInViewPortHTML);
                }
            }


            //Receive message from LC
            window.addEventListener("message", function(event) {
                data = event.data;
                unit = data.unit;
                colorByTerritory = data.colorByTerritory;
                colorByLegalHierarchy = data.colorByLegalHierarchy;
                selectedViewOption = data.selectedViewOption;


                if(data.state === 'INIT' || data.state === "UPDATE") {
                    onlyMainAccounts = data.onlyMainAccounts;
                    accountStatus=data.accountStatus;
                    
                    //  document.getElementById("accstatus").value=accountStatus;
                    $("#mainAccountSwitch").prop('checked', onlyMainAccounts);

                    mapData = data.mapData;



                    if(map == null || data.state === "INIT") {
                          //Create new map
                        map = new google.maps.Map(document.getElementById("map"), data.mapOptions);
                         //Create service
                        service = new google.maps.places.PlacesService(map);
                    }


                    if(data.state === "UPDATE") {
                        deleteMarkers(accountMarker);
                        accountMarker = [];
                    }


                    try {
                        //Set map center
                        map.setCenter(data.mapOptionsCenter);

                    } catch(ex) {
                        console.error(ex);
                        alert(ex);
                    }


                    //iterate through map data for each point (even if 1)

                    //Add marker for each account
                    for(let i = 0; i < mapData.length; i++){
                        let myLatLng = new google.maps.LatLng(mapData[i].lat, mapData[i].lng);
                        if(data.mapBoundToMarkers) {
                            bounds.extend(myLatLng);
                        }
                        if(mapData[i].isCenter && !mapData[i].isAccount) {

                            centerMarker = addMarker({
                                position: myLatLng,
                                markerText: mapData[i].markerText,
                                iconName: mapData[i].icon,
                                draggable: mapData[i].draggable
                            });
                        } else {
                            let content = getInfoWindowContent(mapData[i].account);
                            let marker = addMarker({
                                position: myLatLng,
                                markerText: content,
                                iconName: mapData[i].icon,
                                account: mapData[i].account,
                                draggable: true
                            });
                            accountMarker.push(marker);
                        }

                        


                    }

                    if(data.mapBoundToMarkers) {
                        map.fitBounds(bounds);
                    }

                    //Hide loading animation
                    $(".optionInput").show();
                    map.addListener('idle', function() {
                        checkNearbySearches();
                    });
                    map.addListener('drag', function() {
                    });
                    map.addListener('click', function() {
                        if($( window ).width() < 500) {
                            $("#map").css("z-index", 99);
                        }
                         closeInfoWindows();
                    });

//                      map.panBy(80, 0);


                    if(colorByTerritory) {
                        setTerritoriesByAccount();
                            colorizeMarkersByTerritory();
                            showLegendBusiness(territories, "#territoryLegend", "toggleTerritory");
                    } else if(selectedViewOption === "Last Sales Visit") {
                        showSalesLegend("Last Sales Visit", "Last_Sales_Visit_Icon__c", "#lsvLegend");
                    } else  if(selectedViewOption === "Last Training Event") {
                         showSalesLegend("Last Training Event", "Last_Training_Event_Icon__c", "#lteLegend");
                    }


                } else if(data.state === 'CHANGE_VIEW') {

                    showLoadingSpinner();
                    $(".toggleVisibility").removeClass("crossed");
                    let type = data.type;
                    showAllMarker(map);


                    if(type === "reset") {

                        resetMarkerColor();
                        hideLegends();
                    } else {

                        if(type === 'Segmentation (POS)') {
                            showSalesLegend(type, "Sales_Map_POS_Segment_Icon__c", "#segLegend");
                            colorizeMarkers('Segment_Text_POS1__c', 'Sales_Map_POS_Segment_Icon__c');
                        } else if(type === 'Segmentation (Owner)') {
                            showSalesLegend(type, "Sales_Map_Owner_Segment_Icon__c", "#segLegend");
                            colorizeMarkers('Segment_Text_Owner__c', 'Sales_Map_Owner_Segment_Icon__c');
                        } else if(type === 'Segmentation (CG)') {
                            showSalesLegend(type, "Sales_Map_CG_Segment_Icon__c", "#segLegend");
                            colorizeMarkers('Segment_Text_CG__c', 'Sales_Map_CG_Segment_Icon__c');
                        }else if(type === 'Last Sales Visit') {
                            showSalesLegend(type, "Last_Sales_Visit_Icon__c", "#lsvLegend");
                            colorizeMarkers('Last_Sales_Visit__c', 'Last_Sales_Visit_Icon__c');
                        } else if(type === 'Last Training Event') {
                            showSalesLegend(type, "Last_Training_Event_Icon__c", "#lteLegend");
                            colorizeMarkers('Last_Training_Event__c', 'Last_Training_Event_Icon__c');
                        }else if(type === 'Territory') {
                            setTerritoriesByAccount();
                            colorizeMarkersByTerritory();
                            showLegendBusiness(territories, "#territoryLegend", "toggleTerritory");
                        }else if(type === 'Händlerstatus') {
                            colorizeMarkers('H_nderstatus__c', 'H_nderstatus__c');
                            showSalesLegend(type, "H_nderstatus__c", "#haendlerStatusLegend");

                        }else if(type === 'Distribution Channel') {
                            colorizeMarkers('Distribution_Channel_Color__c', 'Distribution_Channel_Color__c');
                            showDcLegend();
                        }
                    }
                }  else if(data.state === 'MARKER_BOUNCE') {

                    let accountId = data.accountId;
                    bounceMarker(accountId);
                }


                hideLoadingSpinner();

            }, false);

            let lexOrigin = 'https://{!$CurrentPage.parameters.lcHost}';

            function hideLegends() {
                $(".legend").hide();
            }

            function colorizeMarkersByTerritory() {
                let index = "0";
                for(let i in accountMarker) {
                    let marker = accountMarker[i];
                    if(marker != null) {
                        if(marker.account.Territory__c) {
                            index = getTerritoryIndexById(marker.account.Territory__c)+"";
                            icon = getIconURL(index);
                        } else {
                            index = getTerritoryIndexByName("not set")+"";
                            icon = getIconURL(index);
                        }

                        marker.setIcon(icon);
                    }

                }
            }

            function colorizeMarkersByLegalHierarchy() {
                let index = "0";
                for(let i in accountMarker) {
                    let marker = accountMarker[i];
                    if(marker != null) {
                         if(marker.account.Customer_Hierarchy_2_Description__c) {
                            index = getLegalHierarchyIndexByName(marker.account.Customer_Hierarchy_2_Description__r.Name)+"";
                            icon = getIconURL(index);
                         } else {
                            index = getLegalHierarchyIndexByName("not set")+"";
                            icon = getIconURL("blue");
                         }

                        marker.setIcon(icon);
                    }
                }
            }

            function getTerritoryIndexByName(name) {
                let index = territories.findIndex(function(t) {
                    return t.name === this[0];
                 }, [name]);

               return index;
            }

            function getTerritoryIndexById(id) {
                let index = territories.findIndex(function(t) {
                    return t.id === this[0];
                 }, [id]);

               return index;
            }

            function getLegalHierarchyIndexByName(name) {
                let index = legalHierarchies.findIndex(function(lh) {
                    return lh === this[0];
                 }, [name]);

               return index;
            }

            function setLegalHierarchiesByAccounts() {
                let lhSet = new Set();
                legalHierarchies = [];
                for(let i in accountMarker) {
                    let marker = accountMarker[i];
                    if(marker != null) {
                        let lh = "not set";
                        if(marker.account.Customer_Hierarchy_2_Description__c) {
                            lh = marker.account.Customer_Hierarchy_2_Description__r.Name;
                        }
                        if(!lhSet.has(lh)) {
                            lhSet.add(lh);
                            legalHierarchies.push(lh);
                        }
                    }
                }
            }

            function sortJSON(arr, key, order) {
                return arr.sort(function(objA, objB){
                    let a = objA[key].toLowerCase();
                    let b = objB[key].toLowerCase();
                    if(order === "desc") {
                        if(a < b) return 1;
                        if(a > b) return -1;
                    } else {
                        if(a < b) return -1;
                        if(a > b) return 1;
                    }

                    return 0;
                })
            }

            function setTerritoriesByAccount() {
                let tSet = new Set();
                territories = [];
                for(let i in accountMarker) {
                    let marker = accountMarker[i];
                    if(marker != null) {
                        if(marker.account.Territory__c) {
                            let id = marker.account.Territory__c;
                            if(!tSet.has(id)) {
                                territories.push({
                                    id: id,
                                    name: marker.account.Territory__r.Name
                                });
                                tSet.add(id);
                            }
                        }
                    }
                }
                territories = sortJSON(territories, "name");
            }

            function showLegendBusiness(arr, id, toggleClass) {
                let html = '';
                for(let i in arr) {
                    let icon = getIconURL(i+"").url;
                    let o = arr[i];
                    html += '<tr>'+
                        '<td><img src="'+icon+'"/></td>'+
                       ' <td class="'+toggleClass+'" data-id='+o.id+'> '+o.name+'</td>'+
                   ' </tr>';
                   $(id).find(".legendTable").html(html);
                   $(".legend").hide();
                   $(id).show();
                }
            }

            function showDcLegend() {

                let type = 'Distribution Channel';
                let field = "Distribution_Channel__c";
                let colorField = "Distribution_Channel_Color__c";
                let uniqueDcs = new Set();
                let tableBodyHtml = "";
                let tableRows = [];
                let id = "#dcLegend";
                let currentColor = null;
                let icon = null;

                if($(id).find(".legendTable").html() !== "") {
                    accountMarker.filter((account) => {return account != null}).forEach((marker) => {
                        currentDc = marker.account[field];
                        currentColor = marker.account[colorField];
                        if(!uniqueDcs.has(currentDc)) {
                            uniqueDcs.add(currentDc);
                            tableRows.push({
                                html : '<tr>'+
                                ' <td><img src="'+getIconURL(currentColor).url+'"/></td>'+
                                ' <td class="toggleVisibility" data-icon="'+currentColor+'" data-field="Distribution Channel">'+marker.account[field]+'</td>'+
                                ' </tr>',
                                currentDc
                            });
                        }
                    });

                }


                for(let i = 0; i < tableRows.length - 1; i++) {
                   for(let j = i+1; j < tableRows.length; j++) {
                       if(tableRows[i].currentDc > tableRows[j].currentDc) {
                           let temp = tableRows[i];
                           tableRows[i] = tableRows[j];
                           tableRows[j] = temp;
                       }
                   }
                }

                for(let i in tableRows) {
                    tableBodyHtml += tableRows[i].html;
                }


                $(id).find(".legendTable").html(tableBodyHtml);
                $(".legend").hide();
                $(id).show();

            }


            function showSalesLegend(type, field, id) {
                let html = '';
                let iconColorSet = new Set();
                if($(id).find(".legendTable").html() !== "") {
                    let legendRows = [];
                    for(let i in accountMarker) {
                        if(accountMarker[i] != null ) {

                            let marker = accountMarker[i];
                            let iconColor = marker.account.hasOwnProperty(field) ? marker.account[field] : 'blue';
                            let icon = getIconURL(iconColor).url;
                            let tableRowHTML = "";


                            if(!iconColorSet.has(iconColor)) {

                                let legendRow = {
                                    prio : -1,
                                    html : "",
                                };

                                iconColorSet.add(iconColor);
                                let label = "not set";

                                if(type === "Last Sales Visit" || type === "Last Training Event") {
                                    if(iconColor === "green") {
                                        label = '< 30 days ago';
                                        legendRow.prio = 0;
                                    } else   if(iconColor === "yellow") {
                                        label = '30-90 days ago';
                                        legendRow.prio = 1;
                                    } else if(iconColor === "orange") {
                                        label = '90-180 days ago';
                                        legendRow.prio = 2;
                                    } else   if(iconColor === "red") {
                                        label = '> 180 days ago';
                                        legendRow.prio = 3;
                                    } else if(iconColor === "rose") {
                                        label = type === "Last Sales Visit" ? 'Visit scheduled' : 'Training scheduled';
                                        legendRow.prio = 4;
                                    }

                                } else if(type === "Segmentation (POS)") {

                                    if(iconColor === "green") {
                                        label = 'Diamond';
                                        legendRow.prio = 4;
                                    } else   if(iconColor === "yellow") {
                                        label = 'Rising Star';
                                        legendRow.prio = 3;
                                    } else if(iconColor === "orange") {
                                        label = 'Heart';
                                        legendRow.prio = 2;
                                    } else if(iconColor === "red") {
                                        label = 'Leaf';
                                        legendRow.prio = 1;
                                    } 

                                }else if(type === "Segmentation (Owner)") {

                                    if(iconColor === "green") {
                                        label = 'Diamond';
                                        legendRow.prio = 4;
                                    } else   if(iconColor === "yellow") {
                                        label = 'Rising Star';
                                        legendRow.prio = 3;
                                    } else if(iconColor === "orange") {
                                        label = 'Heart';
                                        legendRow.prio = 2;
                                    } else if(iconColor === "red") {
                                        label = 'Leaf';
                                        legendRow.prio = 1;
                                    } 

                                }else if(type === "Segmentation (CG)") {

                                    if(iconColor === "green") {
                                        label = 'Diamond';
                                        legendRow.prio = 4;
                                    } else   if(iconColor === "yellow") {
                                        label = 'Rising Star';
                                        legendRow.prio = 3;
                                    } else if(iconColor === "orange") {
                                        label = 'Heart';
                                        legendRow.prio = 2;
                                    } else if(iconColor === "red") {
                                        label = 'Leaf';
                                        legendRow.prio = 1;
                                    } 

                                } else if(type === "Händlerstatus") {


                                    if(iconColor === "Bronze") {
                                        legendRow.prio = 1;
                                    } else if(iconColor === "Silber") {
                                        legendRow.prio = 2;
                                    } else if(iconColor === "Gold")  {
                                        legendRow.prio = 3;
                                    }

                                    if(iconColor !== "blue") {
                                        label = iconColor;
                                    }
                                }

                                legendRow.html = '<tr>'+
                                    '<td><img src="'+icon+'"/></td>'+
                                    ' <td class="toggleVisibility" data-icon="'+iconColor+'" data-field="'+type+'"> '+label+'</td>'+
                                    ' </tr>'
                                ;

                                legendRows.push(legendRow);

                            }

                        }
                    }

                   for(let i = 0; i < legendRows.length - 1; i++) {
                       for(let j = i+1; j < legendRows.length; j++) {
                           if(legendRows[i].prio > legendRows[j].prio) {
                               let temp = legendRows[i];
                               legendRows[i] = legendRows[j];
                               legendRows[j] = temp;
                           }
                       }
                   }



                    for(let i in legendRows) {
                        html += legendRows[i].html;
                    }



                    $(id).find(".legendTable").html(html);
                    $(".legend").hide();
                    $(id).show();

                } else {
                    $(id).find(".legendTable").html(html);
                    $(".legend").hide();
                    $(id).show();
                }


            }

            function colorizeMarkers(field, iconField) {

                for(let i = 0; i < accountMarker.length; i++) {
                    let marker = accountMarker[i];
                    if(marker != null) {
                        let account = marker.account;
                        let url = getIconURL('business');

                        if(account.hasOwnProperty(iconField)) {
                            url = getIconURL(account[iconField]);
                        }
                        marker.setIcon(url);
                    }
                }

            }

            function resetMarkerColor() {
                for(let i = 0; i < accountMarker.length; i++) {
                    let marker = accountMarker[i];
                    if(marker != null) {
                        if(marker.account.isMainAccount__c) {
                            marker.setIcon(getIconURL("gold"));
                        } else {
                            marker.setIcon(getIconURL("business"));
                        }
                    }
                }
            }

            function getMarkerByAccountId(accountId) {
                let marker = accountMarker.find(function(marker) {
                     if(marker != null) {
                         if(marker.account.Id == this[0]) {
                             return marker;
                         }
                     }

                 }, [accountId]);

                 return marker;
            }

             function bounceMarker(accountId) {
                 let marker = getMarkerByAccountId(accountId);
                 if(marker != null) {
                     marker.setAnimation(google.maps.Animation.BOUNCE);
                     marker.setZIndex(99999);
                     setTimeout(function() {
                         marker.setAnimation(null);
                     }, 10000);
                 }
             }

            function showLoadingSpinner(msg) {
                if(msg != null) {
                    $(".loader-msg").html(msg);
                }
                $(".loader-container").fadeIn();
            }

            function hideLoadingSpinner() {
                $(".loader-container").fadeOut();
            }
            function days_between(date1, date2) {

                // The number of milliseconds in one day
                let ONE_DAY = 1000 * 60 * 60 * 24

                // Convert both dates to milliseconds
                let date1_ms = date1.getTime()
                let date2_ms = date2.getTime()

                // Calculate the difference in milliseconds
                let difference_ms = Math.abs(date1_ms - date2_ms)

                // Convert back to days and return
                return Math.round(difference_ms/ONE_DAY)

            }

            //Send message to LC
            function sendToLC(message) {
                if(typeof(lexOrigin) != 'undefined'){
                    parent.postMessage(message, lexOrigin);
                }
            }

            sendToLC({'state':'LOADED', 'vfHost': "{!LEFT($CurrentPage.URL,FIND('/',$CurrentPage.URL,9))}"});

            function getIconURL(iconName) {
                switch(iconName) {
                    case "home": return "";

                    case "blue": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "business": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "0": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "yellow": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_yellow.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "15": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_yellow.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "green": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_green.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "1": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_green.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "red": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_red.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "6": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_red.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "brown": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_brown.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "Bronze": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_brown.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "5": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_brown.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "orange": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_orange.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "2": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_orange.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "rose": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_rose.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "3": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_rose.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "gold": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_gold.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "Gold": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_gold.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "4": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_gold.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "babyblue": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_babyblue.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "7": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_babyblue.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "black": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_black.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "8": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_black.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "olive": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_olive.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "9": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_olive.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "pink": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_pink.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "10": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_pink.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "vlieder": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_vlieder.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "11": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_vlieder.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "turqoise": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_turqoise.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "12": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_turqoise.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "purple": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_purple.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "13": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_purple.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "violet": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_violet.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "14": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_violet.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "darkgrey": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_darkgrey.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "15": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_darkgrey.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "nude": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_nude.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "16": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_nude.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "neongreen": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_neongreen.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "17": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_neongreen.png')}", scaledSize: new google.maps.Size(33, 33)};

                    case "silver": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_silver.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "Silber": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_silver.png')}", scaledSize: new google.maps.Size(33, 33)};
                    case "18": return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer_silver.png')}", scaledSize: new google.maps.Size(33, 33)};
                    default: return { url:  "{!URLFOR($Resource.map_icons, '/map_icons/customer.png')}", scaledSize: new google.maps.Size(33, 33)};
                }

            }

            //Add marker for each point along with text
            function addMarker(feature) {

                let icon = getIconURL(feature.iconName);


                if(feature.account) {
                    if(colorByTerritory){
                        let index = "0";
                        for(let i in territories) {
                            if(feature.account.Territory__r.Name === territories[i]) {
                                index = i+"";
                                icon = getIconURL(index);
                                break;
                            }

                        }
                        icon = getIconURL(index);
                    } else if(colorByLegalHierarchy){
                        let index = "0";
                        for(let i in legalHierarchies) {
                            if(feature.account.Customer_Hierarchy_2_Description__r.Name === legalHierarchies[i]) {
                                index = i+"";
                                icon = getIconURL(index);
                                break;
                            }

                        }
                    } else if(selectedViewOption === "Last Sales Visit") {
                        icon = getIconURL(feature.account.Last_Sales_Visit_Icon__c);
                    } else if(selectedViewOption === "Last Training Event") {
                        icon = getIconURL(feature.account.Last_Training_Event_Icon__c);
                    }
                }





                let marker = new google.maps.Marker({
                    position: feature.position,
                    icon: icon,
                    map: map,
                    account: feature.account,
                    //draggable: feature.draggable,
//                    animation: google.maps.Animation.DROP,
                    hidden: false,
                });
                let infoWindow = new google.maps.InfoWindow({
                    content: feature.markerText,
                });
                infoWindows.push(infoWindow);
                infoWindow.setZIndex(999999);

                if($( window ).width() < 500) {
                    google.maps.event.addListener(infoWindow,'closeclick',function(){
                       $("#map").css("z-index", 99);
                    });
                }

                google.maps.event.addListener(marker, 'click', function() {
                    currentMarker = this;
                    closeInfoWindows();
                    infoWindow.open(map,marker);
                    $("#updateGeolocation").hide();
                    this.setAnimation(null);
                    if($( window ).width() < 500) {
                        $("#map").css("z-index", 9999);
                    }
                });


//
//                google.maps.event.addListener(marker, 'dragend', function() {
//                    currentMarker = this;
//                    closeInfoWindows();
//                    $("#updateGeolocation .body").html("You moved the marker of ("+this.account.Bill_to_Ship_to_text__c+") "+this.account.Name+". <br/><br/> Would you like to change the location to the current one? ");
//                    $("#updateGeolocation").slideDown();
//                });
//
//                google.maps.event.addListener(marker, 'dragstart', function() {
//                    closeInfoWindows();
//                    currentMarker = this;
//                });



                return marker;
            }

            $("body").on("click", "#confirmUpdateGeolocation", function() {
                let marker = currentMarker;
                let accountId = marker.account.Id;
                let lat = marker.getPosition().toJSON().lat;
                let lng = marker.getPosition().toJSON().lng;
                if(accountId != null) {
                    message = {
                        state: "GEOLOCATIONUPDATE",
                        accountId: accountId,
                        lat: lat,
                        lng: lng
                    }
                    parent.postMessage(message, lexOrigin);
                }
                currentMarker = null;
                $("#updateGeolocation").slideUp();
            });

            $("body").on("click", "#cancelUpdateGeolocation", function() {
                let lat = currentMarker.account.GeoLocation__Latitude__s != null ? currentMarker.account.GeoLocation__Latitude__s : currentMarker.account.BillingLatitude;
                let lng = currentMarker.account.GeoLocation__Longitude__s != null ? currentMarker.account.GeoLocation__Longitude__s : currentMarker.account.BillingLongitude;
                let LatLng = {
                    lat: parseFloat(lat),
                    lng: parseFloat(lng)
                };
                currentMarker.setPosition(LatLng);
                $("#updateGeolocation").slideUp();
            });

        });

        //Let LC know that VF page been loaded along with it's URL
        //LC will then send the data
        //This is done because LC has no way to know that VF page in iFrame has been loaded, event listener set and ready for data

        </script>
    </body>
    </html>
</apex:page>